import unittest,strformat
import PPM/PPM,PPM/pixel

suite "testing PPM":
  setup:
    # for testing header
    let ppm = newPPM[3,2,255]()
    let header = &"P3\n{ppm.width} {ppm.height}\n{ppm.colorDepth}\n"
    # for testing buffer
    let line1:array[3,Pixel[255]] = [newPixel[255](255,0,0),newPixel[255](0,255,0),newPixel[255](0,0,255)]
    let line2:array[3,Pixel[255]] = [newPixel[255](255,255,0),newPixel[255](0,255,255),newPixel[255](255,0,255)]
    let lines = [line1,line2]
    var currbuffer:string = ""
    for line in lines:
        var currline:string = ""
        for p in line:
            currline &= p.toString() & " "
        currbuffer &= currline & "\n"
    # for testing file
    let filename = "./tests/test.ppm"
    let filecontent = """P3
3 2
255
255 0 0 0 255 0 0 0 255 
255 255 0 0 255 255 255 0 255 
"""

  test "test the header of the buffer":
    ppm.createPPMHeader()
    check ppm.buffer == header
  test "test the final buffer generated by the ppm":
    ppm.addLine(line1)
    ppm.addLine(line2)
    ppm.writePixsToBuffer()
    check ppm.buffer == currbuffer
  test "test the final output":
    ppm.createPPMHeader()
    ppm.addLine(line1)
    ppm.addLine(line2)
    ppm.writePixsToBuffer()
    check ppm.buffer == header & currbuffer
  test "test the file":
    ppm.createPPMHeader()
    ppm.addLine(line1)
    ppm.addLine(line2)
    ppm.writePixsToBuffer()
    ppm.writeBufferToFile(filename)
    check readFile(filename) == filecontent